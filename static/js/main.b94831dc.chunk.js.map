{"version":3,"sources":["logo.svg","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","htmlFor","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","protoTypes","PropTypes","string","isRequired","aboutText","defaultProps","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iLCEzB,SAASC,EAAOC,GAC7B,OACEC,IAAAC,cAAA,OAAKC,UAAS,kCAAAC,OAAoCJ,EAAMK,KAAI,QAAAD,OAAOJ,EAAMK,OAC3EJ,IAAAC,cAAA,OAAKC,UAAU,mBACbF,IAAAC,cAAA,KAAGC,UAAU,eAAeG,KAAK,KAAKN,EAAMO,OAC5CN,IAAAC,cAAA,UAAQC,UAAU,iBAAiBK,KAAK,SAASC,iBAAe,WAAWC,iBAAe,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,qBAC1LZ,IAAAC,cAAA,QAAMC,UAAU,yBAElBF,IAAAC,cAAA,OAAKC,UAAU,2BAA2BW,GAAG,0BAC3Cb,IAAAC,cAAA,MAAIC,UAAU,mCACZF,IAAAC,cAAA,MAAIC,UAAU,YACZF,IAAAC,cAAA,KAAGC,UAAU,kBAAkBY,eAAa,OAAOT,KAAK,KAAI,UAUhEL,IAAAC,cAAA,OAAKC,UAAS,+BAAAC,OAA8C,UAAbJ,EAAMK,KAAe,OAAO,UACtEJ,IAAAC,cAAA,SAAOC,UAAU,mBAAmBa,QAAShB,EAAMiB,WAAYT,KAAK,WAAWU,KAAK,SAASJ,GAAG,2BAChGb,IAAAC,cAAA,SAAOC,UAAU,mBAAmBgB,QAAQ,0BAAyB,uBCvBjE,SAASC,EAASpB,GAC7B,IAuCCqB,EAEqBC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GAKpB,OACEtB,IAAAC,cAAAD,IAAA0B,SAAA,KACG1B,IAAAC,cAAA,OAAKC,UAAU,YAAYyB,MAAO,CAACC,MAAoB,SAAb7B,EAAMK,KAAc,QAAQ,UACrEJ,IAAAC,cAAA,UAAKF,EAAM8B,SACZ7B,IAAAC,cAAA,OAAKC,UAAU,QACfF,IAAAC,cAAA,YAAUC,UAAU,eAAe4B,MAAON,EAAMO,SA9B5B,SAACC,GAEpBP,EAAQO,EAAMC,OAAOH,QA4BoDH,MAAO,CAACO,gBAA8B,SAAbnC,EAAMK,KAAc,OAAO,QAASwB,MAAoB,SAAb7B,EAAMK,KAAc,QAAQ,SAAUS,GAAG,QAAQsB,KAAK,OAEpMnC,IAAAC,cAAA,UAAQC,UAAU,uBAAuBa,QArDtB,WAElB,IAAIqB,EAAUZ,EAAKa,cACnBZ,EAAQW,GACRrC,EAAMuC,UAAU,0BAA2B,aAiDqB,wBACjEtC,IAAAC,cAAA,UAAQC,UAAU,uBAAuBa,QA/CtB,WAClB,IAAIqB,EAAUZ,EAAKe,cACnBd,EAAQW,GACRrC,EAAMuC,UAAU,0BAA2B,aA4CqB,wBACjEtC,IAAAC,cAAA,UAAQC,UAAU,uBAAuBa,QAzCnB,WAErBU,EADc,IAEd1B,EAAMuC,UAAU,gBAAiB,aAsCkC,cACpEtC,IAAAC,cAAA,UAAQC,UAAU,uBAAuBa,QA7BzB,WACjB,IAAIS,EAAOgB,SAASC,eAAe,SACnCjB,EAAKkB,SACLC,UAAUC,UAAUC,UAAUrB,EAAKM,OACnC/B,EAAMuC,UAAU,qBAAsB,aAyByB,aAC9DtC,IAAAC,cAAA,UAAQC,UAAU,uBAAuBa,QAtBlB,WACxB,IAAIqB,EAAUZ,EAAKsB,MAAM,QACzBrB,EAAQW,EAAQW,KAAK,MACrBhD,EAAMuC,UAAU,wBAAyB,aAmB6B,wBAIxEtC,IAAAC,cAAA,OAAKC,UAAU,iBAAiByB,MAAO,CAACC,MAAoB,SAAb7B,EAAMK,KAAc,QAAQ,UACzEJ,IAAAC,cAAA,UAAI,qBACJD,IAAAC,cAAA,SAAIuB,EAAKsB,MAAM,KAAKE,OAAO,cAAYxB,EAAKwB,OAAO,eACnDhD,IAAAC,cAAA,SAAI,KAAQuB,EAAKsB,MAAM,KAAKE,OAAO,oBACnChD,IAAAC,cAAA,UAAI,WACJD,IAAAC,cAAA,SAAIuB,EAAKwB,OAAO,EAAExB,EAAK,0DDpC7B1B,EAAOmD,WAAa,CAChB3C,MAAO4C,IAAUC,OAAOC,WACxBC,UAAWH,IAAUC,OAAOC,YAGhCtD,EAAOwD,aAAe,CAClBhD,MAAO,WACP+C,UAAW,SE1BAE,MAZf,SAAexD,GAKb,OACEA,EAAMyD,OAASxD,IAAAC,cAAA,OAAKC,UAAS,eAAAC,OAAiBJ,EAAMyD,MAAMjD,KAAI,gCAAgCU,KAAK,SAC3FjB,IAAAC,cAAA,cANW,SAACwD,GAChB,IAAMC,EAAQD,EAAKlB,cACnB,OAAOmB,EAAMC,OAAO,GAAGtB,cAAgBqB,EAAME,MAAM,GAItCC,CAAW9D,EAAMyD,MAAMjD,OAAe,KAAGR,EAAMyD,MAAMM,MC2C3DC,MA5Cf,WAAe,IAAA3C,EACWC,mBAAU,SAAQC,EAAAC,YAAAH,EAAA,GAAnChB,EAAIkB,EAAA,GAAE0C,EAAO1C,EAAA,GAAwB2C,EAClB5C,mBAAS,MAAK6C,EAAA3C,YAAA0C,EAAA,GAAjCT,EAAKU,EAAA,GAAEC,EAAQD,EAAA,GAEhB5B,EAAY,SAAC8B,EAAS7D,GAC1B4D,EAAS,CACPL,IAAKM,EACL7D,KAAMA,IAER8D,WAAW,WACTF,EAAS,OACR,OAmBL,OACAnE,IAAAC,cAAAD,IAAA0B,SAAA,KAGE1B,IAAAC,cAACH,EAAM,CAACQ,MAAM,YAAYF,KAAMA,EAAMY,WApBrB,WACL,UAATZ,GACE4D,EAAQ,QACRxB,SAAS8B,KAAK3C,MAAMO,gBAAkB,OACtCI,EAAU,4BAA6B,WACvCE,SAASlC,MAAQ,0BAGpB0D,EAAQ,SACRxB,SAAS8B,KAAK3C,MAAMO,gBAAkB,QACtCI,EAAU,6BAA8B,WACxCE,SAASlC,MAAQ,6BAUnBN,IAAAC,cAACsD,EAAK,CAACC,MAAOA,IACdxD,IAAAC,cAAA,OAAKC,UAAU,kBACfF,IAAAC,cAACkB,EAAQ,CAACmB,UAAWA,EAAWT,QAAQ,wBAAwBzB,KAAMA,OCjC3DmE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC7E,EAAA8E,EAAA,GAAAC,KAAA/E,EAAAgF,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAW5C,SAASC,eAAe,SACpD4C,OACHrF,IAAAC,cAACD,IAAMsF,WAAU,KACftF,IAAAC,cAAC8D,EAAG,OAENvB,SAASC,eAAe,SAM1B8B","file":"static/js/main.b94831dc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n        </li> \r\n        {/* <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"/\">{props.aboutText}</a>\r\n        </li> */}\r\n      </ul>\r\n      {/* <form className=\"d-flex\" role=\"search\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n        <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n      </form> */}\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n           <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n           <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n  )\r\n}\r\n\r\nNavbar.protoTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'SahilTXT',\r\n    aboutText: 'About'\r\n}\r\n","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        // console.log(\"Uppercase was clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to uppercase!\", \"success\");\r\n    }\r\n\r\n    const handleLoClick = ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to lowercase!\", \"success\");\r\n\r\n    }\r\n\r\n    const handleClearClick = ()=>{\r\n        let newText = '';\r\n        setText(newText)\r\n        props.showAlert(\"Text cleared!\", \"success\");\r\n\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        // console.log(\"On Change\")\r\n        setText(event.target.value);\r\n\r\n    }\r\n\r\n    const handleCopy = ()=>{\r\n      var text = document.getElementById(\"myBox\");\r\n      text.select();\r\n      navigator.clipboard.writeText(text.value);\r\n      props.showAlert(\"Copy to clipboard!\", \"success\");\r\n\r\n    } \r\n\r\n    const handleExtraSpaces = ()=>{\r\n      let newText = text.split(/[ ]+/);\r\n      setText(newText.join(\" \"));\r\n      props.showAlert(\"Extra spaces removed!\", \"success\");\r\n    }\r\n\r\n  const [text, setText] = useState('');\r\n\r\n     //   text = \"new text\" wrong way to change the state\r\n    //  setText(\"new text\") right way to change the state\r\n\r\n  return (\r\n    <>\r\n       <div className='container' style={{color: props.mode==='dark'?'white':'black'}}>\r\n        <h1>{props.heading}</h1>\r\n       <div className=\"mb-3\">\r\n       <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'grey':'white', color: props.mode==='dark'?'white':'black'}} id=\"myBox\" rows=\"8\"></textarea>\r\n       </div>\r\n       <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n       <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n       <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear Text</button>\r\n       <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy Text</button>\r\n       <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n\r\n    </div>\r\n\r\n    <div className=\"container my-2\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n      <h1>Your text summery</h1>\r\n      <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n      <p>{0.008 * text.split(\" \").length} Minutes to read</p>\r\n      <h2>Previwe</h2>\r\n      <p>{text.length>0?text:\"Enter something to text box above to preview it here\"}</p>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert","import logo from './logo.svg';\nimport './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n\nfunction App() {\n  const [mode, setMode] = useState ('light'); //Whether dark mode is enable or not. \n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500);\n  }\n  \n  const toggleMode = ()=>{\n    if(mode === 'light'){\n         setMode('dark')\n         document.body.style.backgroundColor = 'grey';\n         showAlert(\"Dark mode has been enable\", \"success\");\n         document.title = 'TextUtils - Dark Mode';\n    }\n    else{\n      setMode('light')\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enable\", \"success\");\n      document.title = 'TextUtils - Light Mode';\n\n    }\n  }\n\n  return (\n  <>\n    {/* <Navbar title=\"TextUtils\" aboutText=\"About Us\" /> */}\n    {/* <Navbar /> */}\n    <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n    <Alert alert={alert} />\n    <div className=\"container my-3\">\n    <TextForm showAlert={showAlert} heading=\"Enter your text below\" mode={mode} />  \n    {/* <About/>  */}\n    </div>\n  </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}